数组中有一个数字出现的次数超过数组长度的一半，请找出这个数字。例如输入一个长度为9的数组{1,2,3,2,2,2,5,4,2}。
由于数字2在数组中出现了5次，超过数组长度的一半，因此输出2。如果不存在则输出0。
/////////////////////////////////////////////////////////////////////////////////////////
class Solution 
{
public:
    bool InputInvalid=false;
    int MoreThanHalfNum_Solution(vector<int> numbers) 
    {
        if(CheckInvalid(numbers))
            return 0;
        
        int num=numbers[0];
        int times=0;
        int size=numbers.size();
        for(int i=0;i<size;i++)
        {
            if(numbers[i]==num)
            {
                times++;
            }
            else
                times--;
            
            if(times==0)
            {
                times=1;
                num=numbers[i];
            }
        }
        if(!CheckMoreThanHalf(numbers,num))
            return 0;
        
        return num;
    
    }
    bool CheckInvalid(vector<int> numbers)
    {
        InputInvalid=false;
        if(numbers.empty())
            InputInvalid=true;
        
        return InputInvalid;
    }
    bool CheckMoreThanHalf(vector<int> numbers,int number)
    {
        int times=0;
        int size=numbers.size();
        for(int i=0;i<size;i++)
        {
            if(numbers[i]==number)
                times++;
        }
        bool isMoreThanHalf=true;
        if(times*2<=size)
        {
            isMoreThanHalf=false;
            InputInvalid=false;
        }
        return isMoreThanHalf;
    }
};
////////////////////////////////////////////////////////////////////////////////////////////总结

1.上面方法的思路：
如果有符合条件的数字，则它出现的次数比其他所有数字出现的次数和还要多。
在遍历数组时保存两个值：一是数组中一个数字，一是次数。遍历下一个数字时，若它与之前保存的数字相同，则次数加1，否则次数减1；
若次数为0，则保存下一个数字，并将次数置为1。遍历结束后，所保存的数字即为所求。然后再判断它是否符合条件即可。
该方法时间复杂度为O(n)

2.快排sort，其时间复杂度为O(NlogN)

3.注意是否可以改变原数组

4.利用Patition函数的解法，时间复杂度为O(n)，注意该方法会修改输入的数组，剑指offer第79页

////////////////////////////////////////////////////////////////////////////////////////////牛客网参考解析1
class Solution {
public:
    int MoreThanHalfNum_Solution(vector<int> numbers) {
        int n = numbers.size();
        if (n == 0) return 0;
         
        int num = numbers[0], count = 1;
        for (int i = 1; i < n; i++) {
            if (numbers[i] == num) count++;
            else count--;
            if (count == 0) {
                num = numbers[i];
                count = 1;
            }
        }
        // Verifying
        count = 0;
        for (int i = 0; i < n; i++) {
            if (numbers[i] == num) count++;
        }
        if (count * 2 > n) return num;
        return 0;
    }
};
////////////////////////////////////////////////////////////////////////////////////////////牛客网参考解析2
思路一：数组排序后，如果符合条件的数存在，则一定是数组中间那个数。（比如：1，2，2，2，3；或2，2，2，3，4；或2，3，4，4，4等等）
这种方法虽然容易理解，但由于涉及到快排sort，其时间复杂度为O(NlogN)并非最优；
参考代码如下：

class Solution {
public:
    int MoreThanHalfNum_Solution(vector<int> numbers)
    {
        // 因为用到了sort，时间复杂度O(NlogN)，并非最优
        if(numbers.empty()) return 0;
         
        sort(numbers.begin(),numbers.end()); // 排序，取数组中间那个数
        int middle = numbers[numbers.size()/2];
         
        int count=0; // 出现次数
        for(int i=0;i<numbers.size();++i)
        {
            if(numbers[i]==middle) ++count;
        }
         
        return (count>numbers.size()/2) ? middle :  0;
    }
};
思路二：如果有符合条件的数字，则它出现的次数比其他所有数字出现的次数和还要多。
在遍历数组时保存两个值：一是数组中一个数字，一是次数。遍历下一个数字时，若它与之前保存的数字相同，则次数加1，否则次数减1；
若次数为0，则保存下一个数字，并将次数置为1。遍历结束后，所保存的数字即为所求。然后再判断它是否符合条件即可。
参考代码如下：

class Solution {
public:
    int MoreThanHalfNum_Solution(vector<int> numbers)
    {
        if(numbers.empty()) return 0;
         
        // 遍历每个元素，并记录次数；若与前一个元素相同，则次数加1，否则次数减1
        int result = numbers[0];
        int times = 1; // 次数
         
        for(int i=1;i<numbers.size();++i)
        {
            if(times == 0)
            {
                // 更新result的值为当前元素，并置次数为1
                result = numbers[i];
                times = 1;
            }
            else if(numbers[i] == result)
            {
                ++times; // 相同则加1
            }
            else
            {
                --times; // 不同则减1               
            }
        }
         
        // 判断result是否符合条件，即出现次数大于数组长度的一半
        times = 0;
        for(int i=0;i<numbers.size();++i)
        {
            if(numbers[i] == result) ++times;
        }
         
        return (times > numbers.size()/2) ? result : 0;
    }
};
