请实现一个函数用来判断字符串是否表示数值（包括整数和小数）。例如，字符串"+100","5e2","-123","3.1416"和"-1E-16"都表示数值。 
但是"12e","1a3.14","1.2.3","+-5"和"12e+4.3"都不是。

//////////////////////////////////////剑指offer上的参考答案（属于1.传地址的方法，函数调用bool（&string），对应函数定义bool(char** string)）
class Solution
{
public:
    bool isNumeric(char* string)
    {
        if(string==nullptr)
            return false;
        bool numeric=scanInteger(&string);
        if(*string=='.')
        {
            ++string;
            numeric=scanUnsignedInteger(&string)||numeric;///////////注意这里不能换位置 numeric||scanUnsignedInteger(&string),或运算是有顺序，短路原则，前面为1不做后边函数了。
        }
        if(*string=='e'||*string=='E')
        {
            ++string;
            numeric=numeric&&scanInteger(&string);
        }
        return numeric&&*string=='\0';
    }
    bool scanUnsignedInteger(char** string)
    {
        char* before=*string;
        while(**string!='\0'&&**string>='0'&&**string<='9')
            ++(*string);
         
        return *string>before;
    }
    bool scanInteger(char** string)
    {
        if(**string=='+'||**string=='-')
            ++(*string);
        return scanUnsignedInteger(string);
    }
 
};

////////////////////////////（属于2.传引用的方法，函数调用函数调用（string），对应函数定义bool(char* & string)）
class Solution
{
public:
    char* string=nullptr;
    bool isNumeric(char* str)
    {
        string=str;
        if(string==nullptr)
            return false;
        bool numeric=scanInteger(string);
        if(*string=='.')
        {
            ++string;
            numeric=scanUnsignedInteger(string)||numeric;///////////注意这里不能换位置 numeric||scanUnsignedInteger(&string),或运算是有顺序，短路原则，前面为1不做后边了。
        }
        if(*string=='e'||*string=='E')
        {
            ++string;
            numeric=numeric&&scanInteger(string);
        }
        return numeric&&*string=='\0';
    }
    bool scanUnsignedInteger(char*& string)
    {
        char* before=string;
        while(*string!='\0'&&*string>='0'&&*string<='9')
            ++string;
         
        return string>before;
    }
    bool scanInteger(char*& string)
    {
        if(*string=='+'||*string=='-')
            ++string;
        return scanUnsignedInteger(string);
    }
 
};
///////////////////////////（属于3.传值的方法，函数调用（string），对应函数定义bool(char* string)，通过全局变量str来记录string指针改变）
class Solution
{
public:
    char* str=nullptr;
    bool isNumeric(char* string)
    {
        str=string;
        if(string==nullptr)
            return false;
        bool numeric=scanInteger(string);
        string=str;
        if(*string=='.')
        {
            ++string;
            numeric=scanUnsignedInteger(string)||numeric;///////////注意这里不能换位置 numeric||scanUnsignedInteger(&string),或运算是有顺序，短路原则，前面为1不做后边了。
            string=str;
        }
        if(*string=='e'||*string=='E')
        {
            ++string;
            numeric=numeric&&scanInteger(string);
            string=str;
        }
        return numeric&&*string=='\0';
    }
    bool scanUnsignedInteger(char* string3)
    {
        char* before=string3;
        while(*string3!='\0'&&*string3>='0'&&*string3<='9')
            ++string3;
         
        str=string3;
        return string3>before;
    }
    bool scanInteger(char* string2)
    {
        if(*string2=='+'||*string2=='-')
            ++string2;
        str=string2;
        return scanUnsignedInteger(string2);
    }
 
};
////////////////////////////////////////////////////////////////////////总结

函数输入参数相关总结
1.传址 2.传引用 3.传值 

1.函数调用bool（&string），对应函数定义bool(char** string)。
2.函数调用（string），对应函数定义bool(char* & string)。
3.函数调用（string），对应函数定义bool(char* string)，通过全局变量str来记录string指针改变。
（要在外边定义全局变量，记录下string改变后的内容，因为函数调用里string是一个副本，
在函数体里改变sting指针，出了函数体原来的string并没有改变）

char string
char *string
char **string
char ***string

总结一下，想要改变要看函数的返回类型比如void，或者传回的就是char *string，总之，先看函数返回类型

1)返回类型比如void，总之起不到函数结束后还能记录指针改变的内容。
想要改变char* string 后边定义的操作函数输入参数应该为char** string
要改变当前这个层次的指针要在下一层，即多加一个*
比如，要改变*string，就要通过**string。
要改变**string，就要通过***string。
*****************************************
2)返回类型比如void char *string,
想要改变char* string 后边定义的操作函数输入参数可以为char* string，因为对string副本操作后，可以把改变后的string传回去。

/////////////////////////////////////////////////////////牛客网参考解析
class Solution {
public:
    bool isNumeric(char* str) {
        // 标记符号、小数点、e是否出现过
        bool sign = false, decimal = false, hasE = false;
        for (int i = 0; i < strlen(str); i++) {
            if (str[i] == 'e' || str[i] == 'E') {
                if (i == strlen(str)-1) return false; // e后面一定要接数字
                if (hasE) return false;  // 不能同时存在两个e
                hasE = true;
            } else if (str[i] == '+' || str[i] == '-') {
                // 第二次出现+-符号，则必须紧接在e之后
                if (sign && str[i-1] != 'e' && str[i-1] != 'E') return false;
                // 第一次出现+-符号，且不是在字符串开头，则也必须紧接在e之后
                if (!sign && i > 0 && str[i-1] != 'e' && str[i-1] != 'E') return false;
                sign = true;
            } else if (str[i] == '.') {
              // e后面不能接小数点，小数点不能出现两次
                if (hasE || decimal) return false;
                decimal = true;
            } else if (str[i] < '0' || str[i] > '9') // 不合法字符
                return false;
        }
        return true;
    }
};
/////////////////////////////////////////////////////////////////////////////////////////




