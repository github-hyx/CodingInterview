牛客最近来了一个新员工Fish，每天早晨总是会拿着一本英文杂志，写些句子在本子上。同事Cat对Fish写的内容颇感兴趣，有一天他向Fish借来翻看，
但却读不懂它的意思。例如，“student. a am I”。后来才意识到，这家伙原来把句子单词的顺序翻转了，正确的句子应该是“I am a student.”。
Cat对一一的翻转这些单词顺序可不在行，你能帮助他么？
//////////////////////////////////////////////////////////////////////////////////////////////////////
class Solution 
{
public:
    string ReverseSentence(string str) 
    {
        if(str.empty())
            return str;
        
        Reverse(str.begin(),--str.end());
        string::iterator ite_begin=str.begin();
        string::iterator ite_end=str.begin();
        while(ite_begin!=str.end())
        {
            if(*ite_begin==' ')
            {
                ++ite_begin;
                ++ite_end;
            }
            else if(*ite_end==' '||ite_end==str.end())
            {
                Reverse(ite_begin,--ite_end);
                ite_begin=++ite_end;
            }
            else
                ++ite_end;
        }
        return str;
    }
    void Reverse(string::iterator ite_begin,string::iterator ite_end)
    {
        while(ite_begin<ite_end)
        {
            char temp=*ite_begin;
            *ite_begin=*ite_end;
            *ite_end=temp;
            ++ite_begin;
            --ite_end;
        }
    }
};
//////////////////////////////////////////////////////////////////////////////////////////////////////总结
上面的算法思路是剑指offer上的，书上的输入参数为指针char* data，第一步翻转句子中的所有字符，第二部翻转每个单词中字符的顺序。
下面的算法思路利用了string的+连接。
//////////////////////////////////////////////////////////////////////////////////////////////////////牛客网参考解析1
//一个个字母处理就好了
class Solution {
public:
    string ReverseSentence(string str) {
        string res = "", tmp = "";
        for(unsigned int i = 0; i < str.size(); ++i){
            if(str[i] == ' ') res = " " + tmp + res, tmp = "";
            else tmp += str[i];
        }
        if(tmp.size()) res = tmp + res;
        return res;
    }
}; 
//////////////////////////////////////////////////////////////////////////////////////////////////////牛客网参考解析2
//翻转str从s到e的部分
    void ReverseWord(string &str, int s, int e)
    {
        while(s < e)
            swap(str[s++], str[e--]);
    }
 
    string ReverseSentence(string str) {
        ReverseWord(str, 0, str.size() - 1); //先整体翻转
        int s = 0, e = 0;
        int i = 0;
        while(i < str.size())
        {
            while(i < str.size() && str[i] == ' ') //空格跳过
                i++;
            e = s = i; //记录单词的第一个字符的位置
            while(i < str.size() && str[i] != ' ') //不是空格 找单词最后一个字符的位置
            {
                i++;
                e++;
            }
            ReverseWord(str, s, e - 1); //局部翻转
        }
        return str;
    }
