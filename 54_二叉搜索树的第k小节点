//////////////////////////////////////////////////////////////////////
给定一棵二叉搜索树，请找出其中的第k小的结点。例如， （5，3，7，2，4，6，8）中，按结点数值大小顺序第三小结点的值为4。
/*
struct TreeNode {
    int val;
    struct TreeNode *left;
    struct TreeNode *right;
    TreeNode(int x) :
            val(x), left(NULL), right(NULL) {
    }
};
*/
class Solution 
{
public:
    TreeNode* KthNode(TreeNode* pRoot, int k)
    {
        if(pRoot==nullptr||k<=0)
            return nullptr;
        
        return KthNodeCore(pRoot,k);
    }
    
    TreeNode* KthNodeCore(TreeNode* pRoot, int& k)
    {
        TreeNode* target=nullptr;
        if(pRoot->left!=nullptr)
            target=KthNodeCore(pRoot->left,k);
        if(target==nullptr)
        {
            if(k==1)
                target=pRoot;
            
            k--;
        }
        
        if(target==nullptr&&pRoot->right!=nullptr)
            target=KthNodeCore(pRoot->right,k);
        
        return target;
    }

    
};
///////////////////////////////////////////////////////////////////////////////////////////总结
用中序遍历的顺序遍历一颗二叉搜索树，遍历序列数值是递增排序的

///////////////////////////////////////////////////////////////////////////////////////////牛客参考解析1
来一点精简的代码
class Solution {
    int count = 0;
public:
    TreeNode* KthNode(TreeNode* pRoot, unsigned int k)
    {
        if(pRoot){ 
                TreeNode *ret = KthNode(pRoot->left, k);
                if(ret) return ret;
                if(++count == k) return pRoot;
                ret = KthNode(pRoot->right,k);
                if(ret) return ret;
        }
        return nullptr;
    }
};
///////////////////////////////////////////////////////////////////////////////////////////牛客参考解析2
非递归中序遍历
TreeNode KthNode(TreeNode root, int k){
        if(root==null||k==0)
            return null;
        Stack<TreeNode> stack = new Stack<TreeNode>();
        int count = 0;
        TreeNode node = root;
        do{
            if(node!=null){
                stack.push(node);
                node = node.left;
            }else{
                node = stack.pop();
                count++;
                if(count==k)
                    return node;
                node = node.right;
            }
        }while(node!=null||!stack.isEmpty());
        return null;
    }
