输入一个矩阵，按照从外向里以顺时针的顺序依次打印出每一个数字，例如，如果输入如下4 X 4矩阵： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 
则依次打印出数字1,2,3,4,8,12,16,15,14,13,9,5,6,7,11,10.
//////////////////////////////////////////////////////////////////////////vector<int> number传递用引用。
class Solution 
{
public:
    vector<int> printMatrix(vector<vector<int> > matrix) 
    {
        vector<int> number;
        if(matrix.empty())
            return number;
        int rows=matrix.size();
        int columns=matrix[0].size();
        int start=0;
        while(start*2<rows&&start*2<columns)
        {
            printMatrixInCircle(number,matrix,rows,columns,start);
            ++start;
        }
        return number;

    }
    void printMatrixInCircle(vector<int>& number,vector<vector<int> > matrix,int rows,int columns,int start)
    {
        int endX=columns-1-start;
        int endY=rows-1-start;
        //从左到右打印一行
        for(int i=start;i<=endX;i++)
            number.push_back(matrix[start][i]);
        //从上到下打印一列
        if(start<endY)
            for(int i=start+1;i<=endY;i++)
                number.push_back(matrix[i][endX]);
        //从右到左打印一行
        if(start<endY&&start<endX)
            for(int i=endX-1;i>=start;i--)
                number.push_back(matrix[endY][i]);
        //从下到上打印一列
        if(start<endY-1&&start<endX)
            for(int i=endY-1;i>=start+1;i--)
                number.push_back(matrix[i][start]);
    }
};

//////////////////////////////////////////////////////////////////////////vector<int> number传递用全局变量。
class Solution
{
public:
    vector<int> number;
    vector<int> printMatrix(vector<vector<int> > matrix)
    {
        if(matrix.empty())
            return number;
        int rows=matrix.size();
        int columns=matrix[0].size();
        int start=0;
        while(start*2<rows&&start*2<columns)
        {
            printMatrixInCircle(matrix,rows,columns,start);
            ++start;
        }
        return number;
 
    }
    vector<int> printMatrixInCircle(vector<vector<int> > matrix,int rows,int columns,int start)
    {
        int endX=columns-1-start;
        int endY=rows-1-start;
        //从左到右打印一行
        for(int i=start;i<=endX;i++)
            number.push_back(matrix[start][i]);
        //从上到下打印一列
        if(start<endY)
            for(int i=start+1;i<=endY;i++)
                number.push_back(matrix[i][endX]);
        //从右到左打印一行
        if(start<endY&&start<endX)
            for(int i=endX-1;i>=start;i--)
                number.push_back(matrix[endY][i]);
        //从下到上打印一列
        if(start<endY-1&&start<endX)
            for(int i=endY-1;i>=start+1;i--)
                number.push_back(matrix[i][start]);
         
        return number;
    }
};
//////////////////////////////////////////////////////////////////////////////////////////////////总结
vector为空时，matrix.empty()=1；

打印若干个圈，注意判断有几个圈，注意判断一圈有几步，左到右，上到下，右到左，下到上。


//////////////////////////////////////////////////////////////////////////////////////////////////牛客网参考解析
/*解题思路：顺时针打印就是按圈数循环打印，一圈包含两行或者两列，在打印的时候会出现某一圈中只包含一行，要判断从左向右打印和从右向左打印的时候是否会出现重复打印，同样只包含一列时，要判断从上向下打印和从下向上打印的时候是否会出现重复打印的情况*/
class Solution {
public:
    vector<int> printMatrix(vector<vector<int> > matrix) {
        vector<int>res;
        res.clear();
        int row=matrix.size();//行数
        int collor=matrix[0].size();//列数
        //计算打印的圈数
        int circle=((row<collor?row:collor)-1)/2+1;//圈数
        for(int i=0;i<circle;i++){
            //从左向右打印
            for(int j=i;j<collor-i;j++)
                res.push_back(matrix[i][j]);         
            //从上往下的每一列数据
            for(int k=i+1;k<row-i;k++)
                res.push_back(matrix[k][collor-1-i]);
            //判断是否会重复打印(从右向左的每行数据)
            for(int m=collor-i-2;(m>=i)&&(row-i-1!=i);m--)
                res.push_back(matrix[row-i-1][m]);
            //判断是否会重复打印(从下往上的每一列数据)
            for(int n=row-i-2;(n>i)&&(collor-i-1!=i);n--)
                res.push_back(matrix[n][i]);}
        return res;
    }
};

////////////////////////////////////////////////////////////////////////////////////////////
//很惭愧，编译了多次才通过的代码。。
/*
    思想，用左上和右下的坐标定位出一次要旋转打印的数据，一次旋转打印结束后，往对角分别前进和后退一个单位。
    提交代码时，主要的问题出在没有控制好后两个for循环，需要加入条件判断，防止出现单行或者单列的情况。
 */
class Solution {
public:
    vector<int> printMatrix(vector<vector<int> > matrix) {
        int row = matrix.size();
        int col = matrix[0].size();
        vector<int> res;
         
        // 输入的二维数组非法，返回空的数组
        if (row == 0 || col == 0)  return res;
         
        // 定义四个关键变量，表示左上和右下的打印范围
        int left = 0, top = 0, right = col - 1, bottom = row - 1;
        while (left <= right && top <= bottom)
        {
            // left to right
            for (int i = left; i <= right; ++i)  res.push_back(matrix[top][i]);
            // top to bottom
            for (int i = top + 1; i <= bottom; ++i)  res.push_back(matrix[i][right]);
            // right to left
            if (top != bottom)
            for (int i = right - 1; i >= left; --i)  res.push_back(matrix[bottom][i]);
            // bottom to top
            if (left != right)
            for (int i = bottom - 1; i > top; --i)  res.push_back(matrix[i][left]);
            left++,top++,right--,bottom--;
        }
        return res;
    }
};
