请实现一个函数按照之字形打印二叉树，即第一行按照从左到右的顺序打印，第二层按照从右至左的顺序打印，第三行按照从左到右的顺序打印，其他行以此类推。
／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／剑指上的思路
/*
struct TreeNode {
    int val;
    struct TreeNode *left;
    struct TreeNode *right;
    TreeNode(int x) :
            val(x), left(NULL), right(NULL) {
    }
};
*/
class Solution
{
public:
    vector<vector<int> > Print(TreeNode* pRoot)
    {
        vector<vector<int> >result;
        vector<int> vec;
        if(pRoot==nullptr)
            return result;
         
        std::stack<TreeNode*>level[2];
        int currentLevel=0;
        int nextLevel=1;
        level[currentLevel].push(pRoot);
        while(!level[0].empty()||!level[1].empty())
        {
            TreeNode* pNode=level[currentLevel].top();
            level[currentLevel].pop();
            vec.push_back(pNode->val);
            if(currentLevel==0)
            {
                if(pNode->left)
                    level[nextLevel].push(pNode->left);
                 
                if(pNode->right)
                    level[nextLevel].push(pNode->right);
            }
            else
            {
                if(pNode->right)
                    level[nextLevel].push(pNode->right);
                 
                if(pNode->left)
                    level[nextLevel].push(pNode->left);
            }
             
            if(level[currentLevel].empty())
            {
                result.push_back(vec);
                vec.clear();
                currentLevel=1-currentLevel;
                nextLevel=1-nextLevel;
            }
        }
        return result;
    }
    ／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／
    /**
 * 大家的实现很多都是将每层的数据存进ArrayList中，偶数层时进行reverse操作，
 * 在海量数据时，这样效率太低了。
 * （我有一次面试，算法考的就是之字形打印二叉树，用了reverse，
 * 直接被鄙视了，面试官说海量数据时效率根本就不行。）
 *
 * 下面的实现：不必将每层的数据存进ArrayList中，偶数层时进行reverse操作，直接按打印顺序存入
 * 思路：利用Java中的LinkedList的底层实现是双向链表的特点。
 *     1)可用做队列,实现树的层次遍历
 *     2)可双向遍历,奇数层时从前向后遍历，偶数层时从后向前遍历
 */
    ／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／牛客网参考解析
    class Solution {
public:
    vector<vector<int> > Print(TreeNode* pRoot) {
        vector<vector<int>> res;
        if(pRoot == NULL)
            return res;
        queue<TreeNode*> que;
        que.push(pRoot);
        bool even = false;
        while(!que.empty()){
            vector<int> vec;
            const int size = que.size();
            for(int i=0; i<size; ++i){
                TreeNode* tmp = que.front();
                que.pop();
                vec.push_back(tmp->val);
                if(tmp->left != NULL)
                    que.push(tmp->left);
                if(tmp->right != NULL)
                    que.push(tmp->right);
            }
            if(even)
                std::reverse(vec.begin(), vec.end());
            res.push_back(vec);
            even = !even;
        }
        return res;
    }
     
};
     
};
