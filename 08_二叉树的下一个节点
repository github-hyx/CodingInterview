给定一个二叉树和其中的一个结点，请找出中序遍历顺序的下一个结点并且返回。
注意，树中的结点不仅包含左右子结点，同时包含指向父结点的指针。
/*
struct TreeLinkNode {
    int val;
    struct TreeLinkNode *left;
    struct TreeLinkNode *right;
    struct TreeLinkNode *next;
    TreeLinkNode(int x) :val(x), left(NULL), right(NULL), next(NULL) {
        
    }
};
*/
class Solution {
public:
    TreeLinkNode* GetNext(TreeLinkNode* pNode)
    {
        
        if(pNode==nullptr)
            return nullptr;
        
        TreeLinkNode* pNext=nullptr;
        if(pNode->right!=nullptr)//该节点有右子树的话，下一个节点就是它的右子树里的最左子节点。
        {
            TreeLinkNode* pRight=pNode->right;
            while(pRight->left!=nullptr)
            pRight=pRight->left;
            
            pNext=pRight;
        }
        if(pNode->right==nullptr&&pNode->next!=nullptr)//该节点没有右子树，就往父节点遍历，直到父节点是某一节点的左节点。到根节点停止遍历。
        {
            TreeLinkNode* pCurrent=pNode;
            TreeLinkNode* pParent=pNode->next;
            while(pParent!=nullptr&&pCurrent==pParent->right)
            {
                pCurrent=pParent;
                pParent=pParent->next;
            }
            pNext=pParent;
        }
        return pNext;
    }
};

///////////////////////////////////////////////总结

参考解析代码比较简洁！上边的代码多定义一些 TreeLinkNode* pNext，pRight，pCurrent，pParent便于理解。

///////////////////////////////////////////////牛客网参考解析
分析二叉树的下一个节点，一共有以下情况：
1.二叉树为空，则返回空；
2.节点右孩子存在，则设置一个指针从该节点的右孩子出发，一直沿着指向左子结点的指针找到的叶子节点即为下一个节点；
3.节点不是根节点。如果该节点是其父节点的左孩子，则返回父节点；否则继续向上遍历其父节点的父节点，重复之前的判断，返回结果。代码如下：
class Solution {
public:
    TreeLinkNode* GetNext(TreeLinkNode* pNode)
    {
        if(pNode==NULL)
            return NULL;
        if(pNode->right!=NULL)
        {
            pNode=pNode->right;
            while(pNode->left!=NULL)
                pNode=pNode->left;
            return pNode;
        }  
        while(pNode->next!=NULL)
        {
            TreeLinkNode *proot=pNode->next;
            if(proot->left==pNode)
                return proot;
            pNode=pNode->next;
        }
        return NULL;
    }
};
/////////////////////////////////////////////////////////////////////////////////////////////////第二次总结
方法记得，具体写循环条件的时候改了好几次。
/////////////////////////////////////////////////////////////////////////////////////////////////第二次自己写的算法
/*
struct TreeLinkNode {
    int val;
    struct TreeLinkNode *left;
    struct TreeLinkNode *right;
    struct TreeLinkNode *next;
    TreeLinkNode(int x) :val(x), left(NULL), right(NULL), next(NULL) {
        
    }
};
*/
class Solution 
{
public:
    TreeLinkNode* GetNext(TreeLinkNode* pNode)
    {
        if(pNode->right)
        {
            pNode=pNode->right;
            while(pNode->left)
                pNode=pNode->left;
            
            return pNode;
        }
        
        else
        {
            while(pNode->next)
            {          
                if(pNode->next!=nullptr&&pNode->next->left==pNode)
                    return pNode->next;
                
                pNode=pNode->next;
            }
        }
        return nullptr;
        
    }
};
