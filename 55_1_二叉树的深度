输入一棵二叉树，求该树的深度。从根结点到叶结点依次经过的结点（含根、叶结点）形成树的一条路径，最长路径的长度为树的深度。
////////////////////////////////////////////////////////////////////////////
/*
struct TreeNode {
	int val;
	struct TreeNode *left;
	struct TreeNode *right;
	TreeNode(int x) :
			val(x), left(NULL), right(NULL) {
	}
};*/
class Solution {
public:
    int TreeDepth(TreeNode* pRoot)
    {
        if(pRoot==0)
            return 0;
        
        int nLeft=TreeDepth(pRoot->left);
        int nRight=TreeDepth(pRoot->right);
        return (nLeft>nRight)?(nLeft+1):(nRight+1);
    
    }
};
//////////////////////////////////////////////////////////////////////////////
递归求解：
假如是空节点，则返回0；
否则，原树的深度由左右子树中深度较的深度加1，为原树的深度。
//////////////////////////////////////////////////////////////////////////////牛客网参考解析

class Solution {
public:
    int TreeDepth(TreeNode* pRoot){
        if(!pRoot) return 0 ;
            return max(1+TreeDepth(pRoot->left), 1+TreeDepth(pRoot->right));
    }
};
