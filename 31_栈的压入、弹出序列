输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否可能为该栈的弹出顺序。假设压入栈的所有数字均不相等。
例如序列1,2,3,4,5是某栈的压入顺序，序列4,5,3,2,1是该压栈序列对应的一个弹出序列，但4,3,5,1,2就不可能是该压栈序列的弹出序列。
（注意：这两个序列的长度是相等的）
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class Solution 
{
public:
    bool IsPopOrder(vector<int> pushV,vector<int> popV) 
    {
        bool bPossible=false;
        if(pushV.size()!=0&&popV.size()!=0)
        {
            std::stack<int>stackData;
            vector<int>::iterator iterA=pushV.begin();
            vector<int>::iterator iterB=popV.begin();
            for(iterB=popV.begin();iterB<popV.end();iterB++)
            {
                while(stackData.empty()||stackData.top()!=*iterB)
                {
                    if(iterA==pushV.end())
                        break;
                    
                    stackData.push(*iterA);
                    iterA++;
                }
               if(stackData.top()!=*iterB)
                   break;
                
                stackData.pop();
            }
            if(stackData.empty())
                bPossible=true;
        }
        return bPossible;
    }
};
////////////////////////////////////////////////////////////////////////////////////////////////总结
本题选择下面牛客网参考解析的代码比较简便，多建立一个vector<int> stack
思路可参见书上

///////////////////////////////////////////////////////////////////////////////////////////////牛客网参考解析
class Solution {
public:
    bool IsPopOrder(vector<int> pushV,vector<int> popV) {
        if(pushV.size() == 0) return false;
        vector<int> stack;
        for(int i = 0,j = 0 ;i < pushV.size();){
            stack.push_back(pushV[i++]);
            while(j < popV.size() && stack.back() == popV[j]){
                stack.pop_back();
                j++;
            }      
        }
        return stack.empty();
    }
};

