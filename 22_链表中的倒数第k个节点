输入一个链表，输出该链表中倒数第k个结点。
/*
struct ListNode {
	int val;
	struct ListNode *next;
	ListNode(int x) :
			val(x), next(NULL) {
	}
};*/
class Solution 
{
public:
    ListNode* FindKthToTail(ListNode* pListHead, unsigned int k) 
    {
        if(pListHead==nullptr||k==0)
            return nullptr;
        ListNode* pAhead=pListHead;
        ListNode* pBhead=nullptr;
        for(int i=0;i<k-1;i++)
        {
            if(pAhead->next!=nullptr)
                pAhead=pAhead->next;
            else
                return nullptr;
        }
        pBhead=pListHead;
        while(pAhead->next!=nullptr)
        {
            pAhead=pAhead->next;
            pBhead=pBhead->next;
        }
    return pBhead;
    }
};
///////////////////////////////////////////////////////////////////////////////////总结
代码思路如下：两个指针，先让第一个指针和第二个指针都指向头结点，然后再让第一个指正走(k-1)步，
到达第k个节点。然后两个指针同时往后移动，当第一个结点到达末尾的时候，第二个结点所在位置就是倒数第k个节点了。。

1.可以通过两个指针来操作，第一个指针先走k-1步。
2.注意代码鲁棒性，输入nullptr，输入k=0，输入k的值大于节点数目
3.其他方法：将结点压入栈中，再取出第k个

////////////////////////////////////////////////////////////////////////////////////牛客网参考解析
java的一种解法：

使用Stack，将结点压入栈中，再取出第k个就好
if(head == null || k ==0 ){
            return null;
        }
         
        //可以先把链表反转，然后找出第k个
        Stack<ListNode> stack = new Stack<ListNode>();
        int count = 0;
        while(head != null){
            stack.push(head);
            head = head.next;
            count++;
        }
         
        if(count < k){
            return null;
        }
         
        ListNode knode = null;
        for(int i = 0; i < k; i++){
            knode = stack.pop();
        }
         
         
        return knode;

/////////////////////////////////////////////////////////////////////////////////////////自己写的基于栈的解法
class Solution 
{
public:
    ListNode* FindKthToTail(ListNode* pListHead, unsigned int k) 
    {
        if(pListHead==nullptr)
            return nullptr;
        stack<ListNode*> a;
        ListNode* pNode=pListHead;
        ListNode* kNode=nullptr;
        int count=0;
        while(pNode!=nullptr)
        {
            count++;
            a.push(pNode);
            pNode=pNode->next;
            
        }
        if(count<k)
            return nullptr;
        
        for(int i=0;i<k;i++)
        {
            kNode=a.top();
            a.pop();
        }
        return kNode;
    
    }
};
