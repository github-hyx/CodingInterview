请实现一个函数用来找出字符流中第一个只出现一次的字符。例如，当从字符流中只读出前两个字符"go"时，第一个只出现一次的字符是"g"。
当从该字符流中读出前六个字符“google"时，第一个只出现一次的字符是"l"。
//////////////////////////////////////////////////////////////////////////////////////////
class Solution
{
public:
    Solution():index(0)
    {
        for(int i=0;i<256;++i)
            occurrence[i]=-1;
    }
  //Insert one char from stringstream
    void Insert(char ch)
    {
        if(occurrence[ch]==-1)
            occurrence[ch]=index;
        else if(occurrence[ch]>=0)
            occurrence[ch]=-2;
        
        index++;
    }
  //return the first appearence once char in current stringstream
    char FirstAppearingOnce()
    {
        char ch='#';
        int minIndex=numeric_limits<int>::max();// 返回编译器允许的int型数 最大值。
        for(int i=0;i<256;++i)
            if(occurrence[i]>=0&&occurrence[i]<minIndex)
            {
                ch=(char)i;
                minIndex=occurrence[i];
            }
        return ch;
    }
private:
    int occurrence[256];
    int index;

};
//////////////////////////////////////////////////////////////////////////////////////////////////////总结
一个字符占8位，因此不会超过256个，可以申请一个256大小的数组来实现一个简易的哈希表。时间复杂度为O(n)，空间复杂度O(n).
int minIndex=numeric_limits<int>::max();// 返回编译器允许的int型数 最大值。
//////////////////////////////////////////////////////////////////////////////////////////////////////牛客网参考解析1

class Solution
{
public:
  //Insert one char from stringstream
    string s;
    char hash[256]={0};
    void Insert(char ch)
    {
        s+=ch;
        hash[ch]++;
    }
  //return the first appearence once char in current stringstream
    char FirstAppearingOnce()
    {
         
        int size=s.size();
        for(int i=0;i<size;++i)
        {
            if(hash[s[i]]==1)
                return s[i];
        }
        return '#';
    }
 
};

//////////////////////////////////////////////////////////////////////////////////////////////////////牛客网参考解析2

提供一个高效的算法：
思路：时间复杂度O（1），空间复杂度O（n）
        1、用一个128大小的数组统计每个字符出现的次数
        2、用一个队列，如果第一次遇到ch字符，则插入队列；其他情况不在插入
        3、求解第一个出现的字符，判断队首元素是否只出现一次，如果是直接返回，否则删除继续第3步骤

分析：可以看出相同的字符只被插入一次，最多push128个，同时大多数情况会直接返回队首。所以大家不要被里面的while循环迷惑
class Solution
{
public:
  //Insert one char from stringstream
    void Insert(char ch)
    {  
        ++cnt[ch - '\0'];
        if(cnt[ch - '\0'] == 1)
           data.push(ch);
    }
  //return the first appearence once char in current stringstream
    char FirstAppearingOnce()
    {
      while(!data.empty() && cnt[data.front()] >= 2) data.pop();
        if(data.empty()) return '#';
        return data.front();
    }
    Solution()
    {
      memset(cnt, 0, sizeof(cnt));    
    }
private:
    queue<char> data;
    unsigned cnt[128];
};
