输入一个递增排序的数组和一个数字S，在数组中查找两个数，使得他们的和正好是S，如果有多对数字的和等于S，输出两个数的乘积最小的。
///////////////////////////////////////////////////////////////////////////////////
class Solution 
{
public:
    vector<int> FindNumbersWithSum(vector<int> array,int sum) 
    {
        vector<int> vec;
        int size=array.size();
        if(size==0)
            return vec;
        int small=0;
        int big=size-1;
        while(big>small)
        {
            if((array[small]+array[big])==sum)
            {
                vec.push_back(array[small]);
                vec.push_back(array[big]);
                break;
            }
            else if((array[small]+array[big])>sum)
                big--;
            else
                small++;
        }
        return vec;
    }
};
/////////////////////////////////////////////////////////////////////////////////总结

开始还在纠结乘积最小，后来转念一想，a+b=sum,a和b越远乘积越小，而一头一尾两个指针往内靠近的方法找到的就是乘积最小的情况。
如果是乘积最大的情况就是一直找到两个指针重合，每次找到一个就将之前返回的结果向量清空然后更新为新找到的。

////////////////////////////////////////////////////////////////////////////////牛客网参考解析
数列满足递增，设两个头尾两个指针i和j，
若ai + aj == sum，就是答案（相差越远乘积越小）
若ai + aj > sum，aj肯定不是答案之一（前面已得出 i 前面的数已是不可能），j -= 1
若ai + aj < sum，ai肯定不是答案之一（前面已得出 j 后面的数已是不可能），i += 1
O(n)
typedef vector<int> vi;
class Solution {
public:
    vi FindNumbersWithSum(const vi& a,int sum) {
        vi res;
        int n = a.size();
        int i = 0, j = n - 1;
        while(i < j){
            if(a[i] + a[j] == sum){
                res.push_back(a[i]);
                res.push_back(a[j]);
                break;
            }
            while(i < j && a[i] + a[j] > sum) --j;
            while(i < j && a[i] + a[j] < sum) ++i;
        }
        return res;
    }
};
