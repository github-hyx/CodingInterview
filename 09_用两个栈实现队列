用两个栈来实现一个队列，完成队列的Push和Pop操作。 队列中的元素为int类型。
class Solution
{
public:
    void push(int node)
    {
        stack1.push(node);
    }
 
    int pop()
    {
        if(stack2.size()==0)
        {
            while(stack1.size()!=0)
            {
                int indata=stack1.top();
                stack1.pop();
                stack2.push(indata);
            }
        }
        int outdata=stack2.top();
        stack2.pop();
        return outdata;
    }
 
private:
    stack<int> stack1;
    stack<int> stack2;
};
///////////////////////////////////////////////////

///////////////////////////////////////////////////

class Solution
{
public:
    void push(int node) {
       stack1.push(node);
    }

    int pop() {
        int a;
        if(stack2.empty()){
            while(!stack1.empty()){
                a=stack1.top();
                stack2.push(a);
                stack1.pop();
            }
        }
        a=stack2.top();
        stack2.pop();
        return a;
         
    }

private:
    stack<int> stack1;
    stack<int> stack2;
};
用两个栈实现一个队列的功能?要求给出算法和思路!

<分析>：

入队：将元素进栈A

出队：判断栈B是否为空，如果为空，则将栈A中所有元素pop，并push进栈B，栈B出栈；

 如果不为空，栈B直接出栈。

用两个队列实现一个栈的功能?要求给出算法和思路!

<分析>：

入栈：将元素进队列A

出栈：判断队列A中元素的个数是否为1，如果等于1，则出队列，否则将队列A中的元素移出此队列并放入队列B，直到队列A中的元素留下一个，
然后队列A出队列，再把队列B中的元素移出此队列并放入队列A中。

//////////////////////////////////////////////////////////////////////////////////////////////////////第二次总结
方法记得
记得多注意while的循环条件，while(!stack1.empty())循环条件为非空。
//////////////////////////////////////////////////////////////////////////////////////////////////////第二次自己写的算法
class Solution
{
public:
    void push(int node) 
    {
        stack1.push(node);     
    }

    int pop() 
    {
        if(stack2.empty())
        {
            while(!stack1.empty())
            {
                int temp=stack1.top();
                stack1.pop();
                stack2.push(temp);
            }
        }
        int result=stack2.top();
        stack2.pop();
        return result;
    }

private:
    stack<int> stack1;
    stack<int> stack2;
};
