HZ偶尔会拿些专业问题来忽悠那些非计算机专业的同学。今天测试组开完会后,他又发话了:在古老的一维模式识别中,常常需要计算连续子向量的最大和,
当向量全为正数的时候,问题很好解决。但是,如果向量中包含负数,是否应该包含某个负数,并期望旁边的正数会弥补它呢？例如:{6,-3,-2,7,-15,1,2,2},
连续子向量的最大和为8(从第0个开始,到第3个为止)。给一个数组，返回它的最大连续子序列的和，你会不会被他忽悠住？(子向量的长度至少是1)
/////////////////////////////////////////////////////////////////////
class Solution 
{
public:
    int FindGreatestSumOfSubArray(vector<int> array) 
    {
        if(array.empty())
            return 0;
        
        int result;
        int CurSum=0;
        int GreatestSum=array[0];
        
        for(int i=0;i<array.size();i++)
        {
            
            if(CurSum<=0)
                CurSum=array[i];
            else
                CurSum+=array[i];
            
            if(CurSum>GreatestSum)
                GreatestSum=CurSum;
            
        }
        return GreatestSum;
    
    }
};
////////////////////////////////////////////////////////////////////////////////////总结
1.动态规划的思想（用递归的方式分析动态规划问题，但最终都会基于循环去编码）
2.没想到动态规划，就分析累加子数组的和的规律，从而找到结题规律
////////////////////////////////////////////////////////////////////////////////////
//动态规划
int FindGreatestSumOfSubArray(vector<int> array) {
        if(array.empty()) return 0;
        int sum = array[0], tempsum = array[0]; //注意初始值 不能设为0 防止只有负数
        for(int i = 1; i < array.size(); i++) //从1开始 因为0的情况在初始化时完成了
        {
            tempsum = (tempsum < 0) ? array[i] : tempsum + array[i];
            sum = (tempsum > sum) ? tempsum : sum;
        }
        return sum;
    }
