统计一个数字在排序数组中出现的次数。
////////////////////////////////////////////////////////////////////////////
算法思路：二分查找，递归
class Solution 
{
public:
    int GetNumberOfK(vector<int> data ,int k) 
    {
        int result=0;
        int start=0;
        int end=data.size()-1;
        if(data.empty())
            return 0;
        
        int last=GetLastK(data,k,start,end);
        int first=GetFirstK(data,k,start,end);
        if(last<0&&first<0)
            return 0;
        else
            result=last-first+1;
        
        return result;
    }
    int GetFirstK(vector<int> data,int k,int start,int end)
    {
        if(start>end)
            return -1;
        int middleIndex=(start+end)/2;
        if(data[middleIndex]==k)
        {
            if(data[middleIndex-1]!=k||middleIndex==0)
            {
                return middleIndex;
            }
            else
            {
                end=middleIndex-1;
            }
                
        }
        else if(data[middleIndex]>k)
        {
            end=middleIndex-1;
        }
        else
        {
            start=middleIndex+1;
        }
        return GetFirstK(data,k,start,end);
    }
    int GetLastK(vector<int> data,int k,int start,int end)
    {
        if(start>end)
            return -1;
        int middleIndex=(start+end)/2;
        if(data[middleIndex]==k)
        {
            if(data[middleIndex+1]!=k||middleIndex==end)
            {
                return middleIndex;
            }
            else
            {
                start=middleIndex+1;
            }
                
        }
        else if(data[middleIndex]>k)
        {
            end=middleIndex-1;
        }
        else
        {
            start=middleIndex+1;
        }
        return  GetLastK(data,k,start,end);
    }
};
////////////////////////////////////////////////////////////////////////////总结
二分查找
看见有序，肯定就是二分查找了，算法比较简单，不多说，值得一提的是，不要拘泥于递归，要会循环写法。
////////////////////////////////////////////////////////////////////////////牛客网参考解析1

//因为data中都是整数，所以可以稍微变一下，不是搜索k的两个位置，而是搜索k-0.5和k+0.5
//这两个数应该插入的位置，然后相减即可。
class Solution {
public:
    int GetNumberOfK(vector<int> data ,int k) {
        return biSearch(data, k+0.5) - biSearch(data, k-0.5) ;
    }
private:
    int biSearch(const vector<int> & data, double num){
        int s = 0, e = data.size()-1;     
        while(s <= e){
            int mid = (e - s)/2 + s;//mid = (e + s)/2;
            if(data[mid] < num)
                s = mid + 1;
            else if(data[mid] > num)
                e = mid - 1;
        }
        return s;
    }
};
//////////////////////////////////////////////////////////////////////////////////////牛客网参考解析2
思路和剑指offer一样
class Solution {
    /*二分查找 找到第一个K 和 最后一个K 二者位置相减*/
public:
    int GetNumberOfK(vector<int> data ,int k) {
        if(data.empty())
            return 0;
        int number = 0;
        int first = GetFirstIndex(data,k,0,data.size()-1);
        int last = GetLastIndex(data,k,0,data.size()-1);
        if(first>-1 && last>-1)
            number = last - first +1;
        return number;
         
    }
    int GetFirstIndex(vector<int> &data,int k,int start,int end){
        if(start > end)
            return -1;
        int mid = start+(end-start)/2;
        if(data[mid] == k){
            if((mid == start) || (data[mid-1] != k))
                return mid;
            else
                end = mid-1;
        }
        else{
            if(data[mid] > k)
                end = mid - 1;
            else
                start = mid + 1;
        }
        return GetFirstIndex(data,k,start,end);
    }
    int GetLastIndex(vector<int> &data,int k,int start,int end){
        if(start > end)
            return -1;
        int mid = start+(end-start)/2;
        if(data[mid]==k){
            if((mid == end) || (data[mid+1] != k))
                return mid;
            else
                start = mid +1;
        }
        else{
            if(data[mid]>k)
                end = mid-1;
            else
                start = mid+1;
        }
        return GetLastIndex(data,k,start,end);
    }
};
