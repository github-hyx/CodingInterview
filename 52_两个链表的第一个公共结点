输入两个链表，找出它们的第一个公共结点。
/////////////////////////////////////////////////////////////////////////////////////////////////////
/*
struct ListNode {
	int val;
	struct ListNode *next;
	ListNode(int x) :
			val(x), next(NULL) {
	}
};*/
class Solution 
{
public:
    ListNode* FindFirstCommonNode( ListNode* pHead1, ListNode* pHead2) 
    {
        if(pHead1==nullptr||pHead2==nullptr)
            return nullptr;
        
        ListNode* longListNode=pHead1;
        ListNode* shortListNode=pHead2;
        
        int length1=getLength(pHead1);
        int length2=getLength(pHead2);
        int nlength=length1-length2;
        
        if(length1<length2)
        {
            longListNode=pHead2;
            shortListNode=pHead1;
            nlength=length2-length1;
        }
        
        for(int i=0;i<nlength;i++)
        {
            longListNode=longListNode->next;
        }
        
        while(longListNode!=nullptr&&shortListNode!=nullptr&&longListNode!=shortListNode)
        {
            longListNode=longListNode->next;
            shortListNode=shortListNode->next;
        }
        return longListNode;
    }
    int getLength(ListNode* pHead)
    {
        int length=0;
        while(pHead!=nullptr)
        {
            length++;
            pHead=pHead->next;
        }
        return length;
    }
};
/////////////////////////////////////////////////////////////////////////////////////////////////////总结
/*
找出2个链表的长度，然后让长的先走两个链表的长度差，然后再一起走
（因为2个链表用公共的尾部）
*/
/////////////////////////////////////////////////////////////////////////////////////////////////////牛客网参考解析1
/*
找出2个链表的长度，然后让长的先走两个链表的长度差，然后再一起走
（因为2个链表用公共的尾部）
*/
class Solution {
public:
    ListNode* FindFirstCommonNode( ListNode *pHead1, ListNode *pHead2) {
        int len1 = findListLenth(pHead1);
        int len2 = findListLenth(pHead2);
        if(len1 > len2){
            pHead1 = walkStep(pHead1,len1 - len2);
        }else{
            pHead2 = walkStep(pHead2,len2 - len1);
        }
        while(pHead1 != NULL){
            if(pHead1 == pHead2) return pHead1;
            pHead1 = pHead1->next;
            pHead2 = pHead2->next;
        }
        return NULL;
    }
     
    int findListLenth(ListNode *pHead1){
        if(pHead1 == NULL) return 0;
        int sum = 1;
        while(pHead1 = pHead1->next) sum++;
        return sum;
    }
     
    ListNode* walkStep(ListNode *pHead1, int step){
        while(step--){
            pHead1 = pHead1->next;
        }
        return pHead1;
    }
};
/////////////////////////////////////////////////////////////////////////////////////////////////////牛客网参考解析2
最短的代码，不用记长度
class Solution {
public:
    ListNode* FindFirstCommonNode( ListNode *pHead1, ListNode *pHead2) {
        ListNode *p1 = pHead1;
        ListNode *p2 = pHead2;
        while(p1!=p2){
            p1 = (p1==NULL ? pHead2 : p1->next);
            p2 = (p2==NULL ? pHead1 : p2->next);
        }
        return p1;
    }
};
用两个指针扫描”两个链表“，最终两个指针到达 null 或者到达公共结点。

思路：
长度相同有公共结点，第一次就遍历到；没有公共结点，走到尾部NULL相遇，返回NULL
长度不同有公共结点，第一遍差值就出来了，第二遍一起到公共结点；没有公共，一起到结尾NULL。
