小明很喜欢数学,有一天他在做数学作业时,要求计算出9~16的和,他马上就写出了正确答案是100。但是他并不满足于此,
他在想究竟有多少种连续的正数序列的和为100(至少包括两个数)。没多久,他就得到另一组连续正数和为100的序列:18,19,20,21,22。
现在把问题交给你,你能不能也很快的找出所有和为S的连续正数序列? Good Luck!
//////////////////////////////////////////////////////////////////////////
class Solution 
{
public:
    vector<vector<int> > FindContinuousSequence(int sum) 
    {
        vector<vector<int> > result;
        vector<int> vec;
        int small=1;
        int big=2;
        int curSum=small+big;
        int middle=(1+sum)/2;
        if(sum<3)
            return result;
        
        while(small<middle)
        {
            if(curSum==sum)
            {
                vec.clear();
                for(int i=small;i<=big;i++)
                    vec.push_back(i);
                
                result.push_back(vec);
            }
            
            while(curSum>sum&&small<middle)
            {
                curSum-=small;
                small++;
                if(curSum==sum)
                {
                    vec.clear();
                    for(int i=small;i<=big;i++)
                        vec.push_back(i);
                
                    result.push_back(vec);
                }
            }
            big++;
            curSum+=big;
        }
        
        return result;
    }
};
/////////////////////////////////////////////////////////////////////////////////////////////总结
因为这个序列至少需要有两个数字，所以while判定条件为small<middle,即small<(1+s)/2。
/////////////////////////////////////////////////////////////////////////////////////////////牛客网参考解析
//左神的思路，双指针问题
//当总和小于sum，大指针继续+
//否则小指针+
class Solution {
public:
    vector<vector<int> > FindContinuousSequence(int sum) {
        vector<vector<int> > allRes;
        int phigh = 2,plow = 1;
         
        while(phigh > plow){
            int cur = (phigh + plow) * (phigh - plow + 1) / 2;//等差数列求和，s=((a1+an)*n)/2,n为项数。
            if( cur < sum)
                phigh++;
             
            if( cur == sum){
                vector<int> res;
                for(int i = plow; i<=phigh; i++)
                    res.push_back(i);
                allRes.push_back(res);
                plow++;//或者换成phigh++
            }
             
            if(cur > sum)
                plow++;
        }
         
        return allRes;
    }
};
