输入一颗二叉树的跟节点和一个整数，打印出二叉树中结点值的和为输入整数的所有路径。
路径定义为从树的根结点开始往下一直到叶结点所经过的结点形成一条路径。(注意: 在返回值的list中，数组长度大的数组靠前)
/*
struct TreeNode {
	int val;
	struct TreeNode *left;
	struct TreeNode *right;
	TreeNode(int x) :
			val(x), left(NULL), right(NULL) {
	}
};*/
class Solution 
{
public:
    vector<vector<int> > find;
    vector<int> temp;
    vector<vector<int> > FindPath(TreeNode* root,int expectNumber) 
    {
        if(root==nullptr)
            return find;
        int currentNumber=0;
        findpath(root,expectNumber,currentNumber);
        return find;
    }
    void findpath(TreeNode* root,int expectNumber,int currentNumber)
    {
        currentNumber+=root->val;
        temp.push_back(root->val);
        if(currentNumber==expectNumber&&root->left==nullptr&&root->right==nullptr)
        {
            find.push_back(temp);
        }
        if(root->left!=nullptr)
        {
            findpath(root->left,expectNumber,currentNumber);
        }
            
        if(root->right!=nullptr)
        {
            findpath(root->right,expectNumber,currentNumber);
        }
        
        temp.pop_back();
    }
};
///////////////////////////////////////////////////////////////////////////////////////////

建立一个vector<int> temp;来记录每一组路径，再存进两层vector中。
注意上面解法中currentNumber不用是全局变量，每一次对应进入子函数前currentNumber保存时当时的包括根节点之前的累积和。

//////////////////////////////////////////////////////////////////////////////////////////牛客参考1
class Solution {
    vector<vector<int> >allRes;
    vector<int> tmp;
    void dfsFind(TreeNode * node , int left){
        tmp.push_back(node->val);
        if(left-node->val == 0 && !node->left && !node->right)
            allRes.push_back(tmp);
        else {
            if(node->left) dfsFind(node->left, left-node->val);
            if(node->right) dfsFind(node->right, left-node->val);
        }
        tmp.pop_back(); 
    }
public:
    vector<vector<int> > FindPath(TreeNode* root,int expectNumber) {
        if(root) dfsFind(root, expectNumber);
        return allRes;
    }
};
//////////////////////////////////////////////////////////////////////////////////////////牛客参考2
这类问题可以用带记忆的DFS来解决。分享一个这类问题的典型解法。
class Solution {
public:
    vector<vector<int> > FindPath(TreeNode* root,int expectNumber) {
        vector<vector<int>> ret;
        vector<int> trace;
        if(root)
            dfs(root,expectNumber,ret,trace);
        return ret;
    }
    void dfs(TreeNode* root,int s,vector<vector<int>> &ret,vector<int> &trace) {
        trace.push_back(root->val);
        if(!root->left&&!root->right) {
            if(s==root->val)
                ret.push_back(trace);
        }
        if(root->left)
            dfs(root->left,s-root->val,ret,trace);
        if(root->right)
            dfs(root->right,s-root->val,ret,trace);
        trace.pop_back();
    }
};
